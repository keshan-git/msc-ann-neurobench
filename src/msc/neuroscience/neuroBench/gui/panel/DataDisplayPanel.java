package msc.neuroscience.neuroBench.gui.panel;

import java.util.ArrayList;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import msc.neuroscience.neuroBench.core.ANNEngine;
import msc.neuroscience.neuroBench.gui.tablemodel.InputDataTableModel;

/**
 *
 * @author Keshan De Silva
 */
public class DataDisplayPanel extends javax.swing.JPanel
{
    private InputDataTableModel inputDataTableModel;
    private ArrayList<ListSelectionListener> listeners;
    private ANNEngine engine;
    
    public DataDisplayPanel()
    {
        initComponents();
        this.listeners = new ArrayList<>();
        
        dataDisplayTable.getSelectionModel().addListSelectionListener(new ListSelectionListener()
        {
            @Override
            public void valueChanged(ListSelectionEvent lse)
            {
                int index = dataDisplayTable.getSelectedRow();
                if ((engine != null) && (index != -1))
                {
                    engine.evaluateANN(index);
                    for (ListSelectionListener listSelectionListener : listeners)
                    {
                        listSelectionListener.valueChanged(lse);   
                    }
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        dataDisplayScrollPane = new javax.swing.JScrollPane();
        dataDisplayTable = new javax.swing.JTable();

        setBorder(javax.swing.BorderFactory.createTitledBorder("Training Data Set"));

        dataDisplayTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {
                {},
                {},
                {},
                {}
            },
            new String []
            {

            }
        ));
        dataDisplayTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        dataDisplayScrollPane.setViewportView(dataDisplayTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(dataDisplayScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(dataDisplayScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 277, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane dataDisplayScrollPane;
    private javax.swing.JTable dataDisplayTable;
    // End of variables declaration//GEN-END:variables

    public void setANNEngine(ANNEngine engine)
    {
        this.engine = engine;
        inputDataTableModel = new InputDataTableModel(engine.getTrainingDataSet());
        dataDisplayTable.setModel(inputDataTableModel);
    }

    public void addListSelectionListener(ListSelectionListener listSelectionListener)
    {
        listeners.add(listSelectionListener);
    }
}
